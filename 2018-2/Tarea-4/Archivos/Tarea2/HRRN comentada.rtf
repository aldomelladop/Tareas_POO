{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <iostream>\
#include <string>\
#include <list>\
#include <utility>\
#include <fstream> \
#include <queue>\
#include <algorithm>\
\
\
using namespace std;\
\
//Para este ejemplo usamos el mismo codigo anterior, con la diferencia que a la lista espera la definimos como una lista de tres elementos, donde en la primera se encontrara el tiempo de llegada a la cola, el segundo elemento sera el tiempo que se demora en ejecutar y por ultimo el valor de R.\
\
//Para esto como la cola debe entrar en el orden del factor R mas grande, entonces invertimos el signo dentro de la funcion compa que definimos anteriormente\
\
//El resto de funciones siguen igual y no presentan cambios, los cambios en solo fueron realizados dentro del main.\
\
bool compa(const pair<pair<float,float>,float> &a,const pair<pair<float,float>,float> &b) \
\{\
	return a.second>b.second;\
\}\
\
bool compa2(const pair<float,float> &a,const pair<float,float> &b)\
\{\
	return a.second<b.second;\
\}\
\
\
\
//Metemos los datos a la cola, teniendo en cuenta que la CPU puede quedar es espera o ociosa.\
\
void meter_a_la_cola(list<pair<float,float>> &tiempos, list<pair<pair<float,float>,float>> &espera,float &tt,float &x,float &y,list<float> &ociosa)\
\{\
	if(tt>x || tt==x)\{espera.push_back(make_pair(make_pair(x,y),0));\}\
	if(tt<x)\
\{\
	espera.push_back(make_pair(make_pair(x,y),0));\
	ociosa.push_back(x-tt);\
\}\
\
\}\
\
\
\
//En la CPU tomamos el primer dato de la cola, calculamos TS, TW y el tiempo total que se lleva procesando datos, los guardamos en distintas listas para calculos posteriores \
\
void cpu(list<pair<float,float>> &tiempos, list<pair<pair<float,float>,float>> &espera,float &tt, list<pair<float,float>> &segundos)\
\{\
	list<pair<pair<float,float>,float>>::iterator x=espera.begin(); //tener en cuenta que el iterado ahora apunta como proimer valor a un pair, y debemos decirle a que valor de dicho pair queremos acceder\
	float ts=x->first.second;\
	float tw;\
	if(tt<x->first.first)\{tt=x->first.first;\}\
	if(tt==x->first.first)\{tw=0;\}\
	if(tt!=x->first.first)\{tw=tt-x->first.first;\}\
	tt=tt+ts;\
	segundos.push_back(make_pair(ts,tw)); \
	espera.pop_front();\
\
\}\
\
void HRRN(list<pair<float,float>> &segundos,list<float> &tr)\
\{\
	list<pair<float,float>>::iterator iter=segundos.begin();\
	float tw;\
	float ts;\
	float ftr;\
	while(iter!=segundos.end())\
\{\
	ts=iter->first;\
	tw=iter->second;\
	ftr=tw+ts;	\
	tr.push_back(ftr);\
	++iter;	\
\}	\
	\
\}\
\
\
int main() \
\{	\
	ifstream entrada("eventos2.dat"); //texto con los mil procesos.\
	list<pair<float,float>> tiempos; //Lista con los datos del .dat	\
	list<pair<float,float>> segundos; //Lista que guarda TS y TW\
	list<float> tiempo_total; //Lista que guarda el tiempo total que se lleva ejecutando procesos\
	list<float> ociosa; //Lista que guarda los segundos que la CPU se encontro ociosa\
	list<pair<pair<float,float>,float>> espera;	\
	list<float> tr;\
	//priority_queue<pair<float,float>,vector<pair<float,float>>,compa> espera; //Lista de espera de los procesos\
\
	float n,n2,tt,a,b,Rr;\
	while(entrada >> n >> n2)\
	\{\
		tiempos.push_back(make_pair(n,n2));\
	\}\
	entrada.close();\
	\
	list<pair<float,float>>::iterator iter=tiempos.begin();\
	tt=iter->first;\
	list<pair<float,float>>::iterator it=tiempos.begin();\
	list<float>::iterator i2=tiempo_total.begin();\
	list<pair<float,float>>::iterator i1=segundos.begin();\
	int stop=tiempos.size();\
	float largomin=0;float largomax=0;float suma_largo=0;\
	float h=tiempos.size();\
	float r=0;\
	while(r!=h)\
\{\
	float x=it->first;\
	float y=it->second;\
	float test=it->first;\
	if(tt>=x && x!=0)\
\{	meter_a_la_cola(tiempos,espera,tt,x,y,ociosa);\
	++it;\
\}\
\
	if(tt<=test || test==0)\
\{	\
	if(largomin>espera.size())\{largomin=espera.size();\}\
	if(espera.size()>largomax)\{largomax=espera.size();\}\
	suma_largo=suma_largo+espera.size();\
	list<pair<pair<float,float>,float>>::iterator iter3=espera.begin(); //Aqui hacemos los cambios en diferencia al codigo del SJF, primero creamos un iterador que apunta al primera valor de la lista de espera, como en este iterador tenemos el tiempo de llegada y tiempo de espera y como ademas tenemos el valor del tiempo total, podemos calcular R de la sigueinte manera\
	while(iter3!=espera.end())\
\{\
	a=iter3->first.first;\
	b=iter3->first.second;\
	Rr=(b+tt-a)/b; //De esta manera calculamos R\
	iter3->second=Rr; //Y lo guardamos en la tercera columna de nuestra cola (considerar que pair<float,float> son las dos primeras columnas)\
	++iter3;\
\}\
\
//Gracias al while, podemos calcular el R de cada valor, SIEMPRE Y CADA VEZ que la CPU deba elegir un valor para ejecutar\
	\
	espera.sort(compa); //Ordenamos desde el mayor R al menor R, con ayuda de la funcion bool\
	cpu(tiempos,espera,tt,segundos); //Lo mismo de las otras veces\
	tiempo_total.push_back(tt);++i2;\
	tiempos.push_back(make_pair(0,0));r++;\
\}\
	if(espera.size()==0 && x!=1)\{ociosa.push_back(x-tt);float a=it->first;tt=a;\}\
\
\
\}	\
\
	//------------------(TW)--------------------------------------------------	\
\
	list<pair<float,float>>::iterator twi=segundos.begin();\
	float sumatw=0;\
	while(twi!=segundos.end())\
\{\
	sumatw=sumatw+twi->second;\
	++twi;;\
\}\
	segundos.sort(compa2);\
	list<pair<float,float>>::iterator twmin=segundos.begin();\
	float twmax=5;\
	sumatw=sumatw/h;\
\
	//--------------------(TR) HRRN-------------------------------------------\
\
	HRRN(segundos,tr);	\
	list<float>::iterator itr=tr.begin();\
	float suma_tr=0;\
	while(itr!=tr.end())\
\{		\
	suma_tr=suma_tr+*itr;\
	++itr;\
\}	\
	tr.sort();\
	list<float>::iterator trmin=tr.begin();\
	float trmax=tr.back();\
	float largo_tr=tr.size();	\
	float R=suma_tr/h;\
	\
	//-------------------Largo de la cola-------------------------------------\
	\
	suma_largo=suma_largo/segundos.size();\
	\
	//-------------------Porcenta CPU-----------------------------------------\
\
	float cpu_ociosa=0;\
	float ttf=*i2;	\
	for(int i:ociosa)\
	\{cpu_ociosa=cpu_ociosa+i;\}\
	float porcentaje=100-(cpu_ociosa/ttf*100);\
	\
	//------------------Imprimir en pantalla----------------------------------\
\
	cout<<"Duracion total de la simulacion: "<<ttf<<endl;\
	cout<<"(Tw) Mimimo "<<twmin->second<<", Maximo "<<twmax<<", promedio "<<sumatw<<endl;\
	cout<<"(Tr) Mimimo "<<*trmin<<", Maximo "<<trmax<<", promedio "<<R<<endl;\
	cout<<"El largo minimo "<<largomin<<", Maximo "<<largomax<<", promedio "<<suma_largo<<endl;\
	cout<<"La CPU se uso durante el "<<porcentaje<<"% del tiempo"<<endl;\
	\
	\
\
	return 0;\
\}}