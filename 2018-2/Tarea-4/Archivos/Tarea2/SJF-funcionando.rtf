#include <string>\
#include <list>\
#include <utility>\
#include <fstream> \
#include <queue>\
#include <algorithm>\
\
\
using namespace std;\
\
bool compa(const pair<float,float> &a,const pair<float,float> &b) \
\{\
	return a.second<b.second;\
\}\
\
\
\
//Metemos los datos a la cola, teniendo en cuenta que la CPU puede quedar es espera o ociosa.\
\
void meter_a_la_cola(list<pair<float,float>> &tiempos, list<pair<float,float>> &espera,float &tt,float &x,float &y,list<float> &ociosa)\
\{\
	if(tt>x || tt==x)\{espera.push_back(make_pair(x,y));\}\
	if(tt<x)\
\{\
	espera.push_back(make_pair(x,y));\
	ociosa.push_back(x-tt);\
\}\
	espera.sort(compa);\
	\
\
\
\}\
\
\
\
//En la CPU tomamos el primer dato de la cola, calculamos TS, TW y el tiempo total que se lleva procesando datos, los guardamos en distintas listas para calculos posteriores \
\
void cpu(list<pair<float,float>> &tiempos, list<pair<float,float>> &espera,float &tt, list<pair<float,float>> &segundos)\
\{\
	//list<pair<float,float>>::iterator hhh=espera.begin();	\
	//for(int j=0;j<espera.size();j++)\{cout<<"-------: "<<hhh->first<<" "<<hhh->second<<endl;++hhh;\}\
	list<pair<float,float>>::iterator x=espera.begin();\
	//cout<<"El tiempo total es: "<<tt<<" ";	\
	//cout<<"-------: "<<x->first<<" "<<x->second<<endl;\
	float ts=x->second;\
	float tw;\
	if(tt<x->first)\{tt=x->first;\}\
	if(tt==x->first)\{tw=0;\}\
	if(tt!=x->first)\{tw=tt-x->first;\}\
	tt=tt+ts;\
	segundos.push_back(make_pair(ts,tw));\
	//cout<<"El tiempo de entrada es: "<<x->first<<endl;\
	//cout<<"-----------------------------------"<<endl;\
	espera.pop_front();\
\
\}\
\
void HRRN(list<pair<float,float>> &segundos,list<float> &hrrn,list<float> &tr)\
\{\
	list<pair<float,float>>::iterator iter=segundos.begin();\
	float tw;\
	float ts;\
	float hrn,ftr;\
	while(iter!=segundos.end())\
\{\
	ts=iter->first;\
	tw=iter->second;\
	ftr=tw+ts;	\
	hrn=(tw+ts)/ts;\
	hrrn.push_back(hrn);\
	tr.push_back(ftr);\
	++iter;	\
\}	\
	\
\}\
\
\
int main() \
\{	\
	ifstream entrada("eventos2.dat"); //texto con los mil procesos.\
	list<pair<float,float>> tiempos; //Lista con los datos del .dat	\
	list<pair<float,float>> segundos; //Lista que guarda TS y TW\
	list<float> tiempo_total; //Lista que guarda el tiempo total que se lleva ejecutando procesos\
	list<float> ociosa; //Lista que guarda los segundos que la CPU se encontro ociosa\
	list<float> hrrn; //Lista con el calculo del HRRN\
	list<pair<float,float>> espera;	\
	list<float> tr;\
	//priority_queue<pair<float,float>,vector<pair<float,float>>,compa> espera; //Lista de espera de los procesos\
\
	float n,n2,tt;\
	while(entrada >> n >> n2)\
	\{\
		tiempos.push_back(make_pair(n,n2));\
	\}\
	entrada.close();\
	\
	list<pair<float,float>>::iterator iter=tiempos.begin();\
	tt=iter->first;\
	list<pair<float,float>>::iterator it=tiempos.begin();\
	list<float>::iterator i2=tiempo_total.begin();\
	list<pair<float,float>>::iterator i1=segundos.begin();\
	int stop=tiempos.size();\
	float largomin=0;float largomax=0;float suma_largo=0;\
	float h=tiempos.size();\
	float r=0;\
	while(r!=h)\
\{\
	float x=it->first;\
	float y=it->second;\
	float test=it->first;\
	if(tt>=x && x!=0)\
\{	meter_a_la_cola(tiempos,espera,tt,x,y,ociosa);\
	++it;\
\}\
\
	if(tt<=test || test==0)\
\{	\
	if(largomin>espera.size())\{largomin=espera.size();\}\
	if(espera.size()>largomax)\{largomax=espera.size();\}\
	suma_largo=suma_largo+espera.size();\
	cpu(tiempos,espera,tt,segundos);\
	tiempo_total.push_back(tt);++i2;\
	tiempos.push_back(make_pair(0,0));r++;//cout<<"El valor de r es: "<<r<<endl;\}\
\}\
	if(espera.size()==0 && x!=1)\{ociosa.push_back(x-tt);float a=it->first;tt=a;\}\
\
\
\}	\
\
	//list<pair<float,float>>::iterator hhh=espera.begin();	\
	//for(int j=0;j<espera.size();j++)\{cout<<"-------: "<<hhh->first<<" "<<hhh->second<<endl;++hhh;\}\
	\
	//------------------(TW)--------------------------------------------------	\
\
	list<pair<float,float>>::iterator twi=segundos.begin();\
	float twmin=twi->second;float twmax=0;float sumatw=0;\
	while(twi!=segundos.end())\
\{\
	if(twmin>twi->second)\{twmin=twi->second;\}\
	if(twmax<twi->second)\{twmax=twi->second;\}\
	sumatw=sumatw+twi->second;\
	++twi;;\
\}\
	sumatw=sumatw/h;\
\
	//--------------------(TR) HRRN-------------------------------------------\
\
	HRRN(segundos,hrrn,tr);	\
	list<float>::iterator itt=hrrn.begin();\
	float suma_hrrn=0;\
	list<float>::iterator itr=tr.begin();\
	float suma_tr=0;\
	while(itr!=tr.end())\
\{		\
	suma_tr=suma_tr+*itr;\
	++itr;\
\}	\
	tr.sort();\
	list<float>::iterator trmin=tr.begin();\
	float trmax=tr.back();\
	float largo_tr=tr.size();	\
	float R=suma_tr/h;\
	\
	//-------------------Largo de la cola-------------------------------------\
	\
	suma_largo=suma_largo/segundos.size();\
	\
	//-------------------Porcenta CPU-----------------------------------------\
\
	float cpu_ociosa=0;\
	float ttf=*i2;	\
	for(int i:ociosa)\
	\{cpu_ociosa=cpu_ociosa+i;\}\
	float porcentaje=100-(cpu_ociosa/ttf*100);\
	\
	//------------------Imprimir en pantalla----------------------------------\
\
	cout<<"Duracion total de la simulacion: "<<ttf<<endl;\
	cout<<"(Tw) Mimimo "<<twmin<<", Maximo "<<twmax<<", promedio "<<sumatw<<endl;\
	cout<<"(Tr) Mimimo "<<*trmin<<", Maximo "<<trmax<<", promedio "<<R<<endl;\
	cout<<"El largo minimo "<<largomin<<", Maximo "<<largomax<<", promedio "<<suma_largo<<endl;\
	cout<<"La CPU se uso durante el "<<porcentaje<<"% del tiempo"<<endl;\
	\
	\
\
	return 0;\
\}}